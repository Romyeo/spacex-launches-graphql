{"version":3,"sources":["components/UI/Logo/logo.svg","images/rocket.png","components/UI/Logo/Logo.js","components/UI/Header/Header.js","constants/colors.js","components/UI/Card/Card.js","components/UI/Indicator/Indicator.js","components/UI/ColorizedErrorText/ColorizedErrorText.js","components/LaunchItem/LaunchItem.js","components/UI/Spinner/Spinner.js","containers/Launches/Launches.js","constants/statusByColor.js","components/UI/Button/Button.js","containers/Launch/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","props","style","width","src","logo","className","alt","Header","title","GREEN","RED","YELLOW","Card","header","content","footerLeft","footerRight","option","Indicator","size","backgroundColor","color","borderRadius","height","ColorizedErrorText","children","LaunchItem","details","flight_number","launch_date_unix","launch_date_utc","launch_success","mission_name","formattedLaunchDate","moment","format","currentDate","endOf","unix","mission","indicator","to","Spinner","LAUNCHES","gql","Launches","useQuery","variables","sortBy","sort","loading","data","launches","map","launch","key","Button","onClick","click","LAUNCH_QUERY","Launch","match","history","id","params","Number","rocket","rocket_id","rocket_name","rocket_type","rocketImg","statusByColor","e","preventDefault","goBack","client","ApolloClient","uri","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4826a8a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e01e7c4e.svg\";","module.exports = __webpack_public_path__ + \"static/media/rocket.f427bb7a.png\";","import React from 'react';\n\nimport logo from './logo.svg';\n\nexport default function Logo(props) {\n  return <img style={{ width: props.width }} src={logo} className=\"logo\" alt=\"SpaceX's logo\" />;\n}","import React from 'react';\n\nimport Logo from '../Logo/Logo';\n\nimport './Header.css';\n\nexport default function Header(props) {\n  return (\n    <header>\n      <Logo width=\"100%\" />\n      <h1>{props.title}</h1>\n    </header>\n  )\n}","export const GREEN = '#3ADBB3';\nexport const RED = '#EA344F';\nexport const YELLOW = '#F8AD29';","import React from 'react';\n\nimport './Card.css';\n\nexport default function Card(props) {\n  const { header, content, footerLeft, footerRight, option } = props;\n\n  return (\n    <div className=\"card\">\n      {\n        (header || option) && (\n          <div className=\"card-header\">\n            {header && <h1>{header}</h1>}\n            {option}\n          </div>\n        )\n      }\n\n      <div className=\"card-content\">\n        {content}\n      </div>\n\n      {\n        (footerLeft || footerRight) && (\n          <div className=\"card-footer\">\n            {\n              true && (\n                <div className=\"card-footer-left\">{footerLeft}</div>\n              )\n            }\n            {\n              true && (\n                <div className=\"card-footer-right\">{footerRight}</div>\n              )\n            }\n          </div>\n        )\n      }\n    </div>\n  );\n}","import React from 'react';\n\nexport default function Indicator(props) {\n  const { size, color } = props;\n\n  const style = {\n    backgroundColor: color,\n    borderRadius: '100%',\n    height: size,\n    width: size,\n  };\n\n  return <div style={style} />;\n}","import React from 'react';\n\nexport default function ColorizedErrorText(props) {\n  const { color, children } = props;\n  return (\n    <span style={{ color }}>\n      {children}\n    </span>\n  );\n}","import React, { Fragment } from 'react';\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\n\nimport { GREEN, RED, YELLOW } from '../../constants/colors';\n\nimport Card from '../UI/Card/Card';\nimport Indicator from '../UI/Indicator/Indicator';\nimport ColorizedErrorText from '../UI/ColorizedErrorText/ColorizedErrorText';\n\nimport './LaunchItem.css';\n\nexport default function LaunchItem(props) {\n  const {\n    details,\n    flight_number,\n    launch_date_unix,\n    launch_date_utc,\n    launch_success,\n    mission_name,\n  } = props;\n\n  const formattedLaunchDate = moment(launch_date_utc).format('LLLL');\n  const currentDate = moment().endOf('day').unix();\n\n  let color = launch_success ? GREEN : RED;\n  color = launch_date_unix >= currentDate ? YELLOW : color;\n\n  const mission = (\n    <Fragment>\n      Mission: {' '}\n      <ColorizedErrorText style={{ color }}>\n        {mission_name}\n      </ColorizedErrorText>\n    </Fragment>\n  );\n\n  const indicator = (\n    <Indicator\n      size={10}\n      color={color}\n    />\n  );\n\n  return (\n    <li>\n      <Link to={`/launches/${flight_number}`}>\n        <Card\n          header={mission}\n          option={indicator}\n          content={details}\n          footerLeft={formattedLaunchDate}\n          footerRight={flight_number}\n        />\n      </Link>\n    </li>\n  )\n}","import React from 'react';\n\nimport './Spinner.css';\n\nexport default function Spinner() {\n  return <div className=\"spinner\" />;\n}","import React, { Fragment } from 'react'\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport Header from '../../components/UI/Header/Header';\nimport LaunchItem from '../../components/LaunchItem/LaunchItem';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nimport './Launches.css';\n\nconst LAUNCHES = gql`\n  query LaunchesQuery($sortBy: String, $sort: String) {\n    launches(sortBy: $sortBy, sort: $sort) {\n      details\n      flight_number\n      mission_name\n      launch_date_unix\n      launch_date_utc\n      launch_success\n    }\n  }\n`;\n\nexport default function Launches() {\n  const { loading, data } = useQuery(LAUNCHES, {\n    variables: {\n      sortBy: 'launch_date_unix',\n      sort: 'desc',\n    }\n  });\n\n  return (\n    <Fragment>\n      <Header title=\"Launches\" />\n      <ul>\n        {\n          loading ?\n            <Spinner /> :\n            data.launches.map(launch => <LaunchItem key={launch.flight_number} {...launch} />)\n        }\n      </ul>\n    </Fragment>\n  )\n}\n","import { RED, GREEN, YELLOW } from './colors';\n\nexport default {\n  [RED]: 'Failed',\n  [GREEN]: 'Success',\n  [YELLOW]: 'Pending'\n}","import React from 'react';\n\nimport './Button.css';\n\nexport default function Button(props) {\n  return (\n    <button className=\"button\" onClick={props.click}>\n      {props.content}\n    </button>\n  )\n}","import React, { Fragment } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport moment from 'moment';\n\nimport { RED, GREEN, YELLOW } from '../../constants/colors';\nimport statusByColor from '../../constants/statusByColor';\n\nimport Card from '../../components/UI/Card/Card';\nimport Header from '../../components/UI/Header/Header';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport ColorizedErrorText from '../../components/UI/ColorizedErrorText/ColorizedErrorText';\n\nimport rocketImg from '../../images/rocket.png';\nimport './Launch.css';\nimport Button from '../../components/UI/Button/Button';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      details\n      flight_number\n      launch_success\n      launch_date_unix\n      launch_date_utc\n      mission_name\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport default function Launch(props) {\n  const { match, history } = props;\n  const id = match.params.id;\n  const { loading, data } = useQuery(LAUNCH_QUERY, {\n    variables: {\n      flight_number: Number(id)\n    }\n  });\n\n  const header = <Header title={`Launch - Flight number ${id}`} />\n\n  if (loading || !data) {\n    return (\n      <Fragment>\n        {header}\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const click = (e) => {\n    e.preventDefault();\n    history.goBack();\n  }\n\n  const {\n    details,\n    launch_date_unix,\n    launch_date_utc,\n    launch_success,\n    mission_name,\n    rocket,\n  } = data.launch;\n\n  const {\n    rocket_id,\n    rocket_name,\n    rocket_type,\n  } = rocket;\n\n  const formattedLaunchDate = moment(launch_date_utc).format('LLLL');\n  const currentDate = moment().endOf('day').unix();\n\n  let color = launch_success ? GREEN : RED;\n  color = launch_date_unix >= currentDate ? YELLOW : color;\n\n  return (\n    <Fragment>\n      {header}\n      <h1>Mission Name: {' '}\n        <ColorizedErrorText color={color}>\n          {mission_name}\n        </ColorizedErrorText>\n      </h1>\n\n      <p className=\"details\">{details}</p>\n\n      <Card\n        content={\n          <div className=\"rocket-container\">\n            <img src={rocketImg} alt=\"rocket-icon\" />\n            <div className=\"rocket-info\">\n              <h3>Name: {rocket_name}</h3>\n              <div className=\"rocket-footer\">\n                <p>ID: {rocket_id}</p>\n                <p>Type: {rocket_type}</p>\n              </div>\n            </div>\n          </div>\n        }\n      />\n\n      <div className=\"footer\">\n        <p>{formattedLaunchDate}</p>\n        <p>\n          Status: {' '}\n          <ColorizedErrorText color={color}>\n            {statusByColor[color]}\n          </ColorizedErrorText>\n        </p>\n      </div>\n\n      <div className=\"options-container\">\n        <Button content=\"Go back\" click={click} />\n      </div>\n    </Fragment>\n  )\n}","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Launches from './containers/Launches/Launches';\nimport Launch from './containers/Launch/Launch';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launches/:id\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}